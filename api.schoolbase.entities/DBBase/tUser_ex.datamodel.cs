//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace api.schoolbase.entities.DBBase
{
    
    public partial class _DBBase
    {
        public static @__api.schoolbase.entities.DBBase.Entity.tUser_ex_Columns tUser_ex = new @__api.schoolbase.entities.DBBase.Entity.tUser_ex_Columns();
    }
    namespace @__api.schoolbase.entities.DBBase.Entity
    {
        public class tUser_ex_Columns : MyLib.DbAccess.SQL.IQueryTable
        {
            private const string ___TABLE_NAME = "tUser_ex";
            private string ___aliasName;
            public tUser_ex_Columns(string aliasName) : base("DBBase") { this.___aliasName = aliasName; }
            public tUser_ex_Columns() : base("DBBase") { this.___aliasName = ___TABLE_NAME; }
    
        #region Table Columns
    
    		private static MyLib.DbAccess.SQL.QueryColumn _UID = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".UID"), DbType.Int64);
            public MyLib.DbAccess.SQL.QueryColumn UID
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _UID;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".UID"), DbType.Int64);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _Accout = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".Accout"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn Accout
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _Accout;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".Accout"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _Email = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".Email"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn Email
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _Email;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".Email"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _Switch = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".Switch"), DbType.Byte);
            public MyLib.DbAccess.SQL.QueryColumn Switch
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _Switch;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".Switch"), DbType.Byte);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _DefaultApp = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".DefaultApp"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn DefaultApp
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _DefaultApp;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".DefaultApp"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _DepID = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".DepID"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn DepID
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _DepID;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".DepID"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _UserType = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".UserType"), DbType.Int64);
            public MyLib.DbAccess.SQL.QueryColumn UserType
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _UserType;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".UserType"), DbType.Int64);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _UserID2 = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".UserID2"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn UserID2
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _UserID2;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".UserID2"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _UserID3 = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".UserID3"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn UserID3
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _UserID3;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".UserID3"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _Photo = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".Photo"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn Photo
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _Photo;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".Photo"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _UserSex = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".UserSex"), DbType.Int32);
            public MyLib.DbAccess.SQL.QueryColumn UserSex
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _UserSex;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".UserSex"), DbType.Int32);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _UserTel = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".UserTel"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn UserTel
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _UserTel;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".UserTel"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _UserBirthday = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".UserBirthday"), DbType.DateTime);
            public MyLib.DbAccess.SQL.QueryColumn UserBirthday
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _UserBirthday;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".UserBirthday"), DbType.DateTime);
                }
            }

        #endregion

                
            public override string ___GetTableName() { return ___TABLE_NAME; }
    		public override string ___GetAliasName() { return ___aliasName ?? ___TABLE_NAME; }
    				        public override MyLib.DbAccess.SQL.QueryColumn ___GetIdentityColumn() { return _UID; }
            		public @__api.schoolbase.entities.DBBase.Entity.tUser_ex_Columns @__Alias(string aliasName) { return new @__api.schoolbase.entities.DBBase.Entity.tUser_ex_Columns(aliasName); }
        }
    }
    [System.Serializable]
    public partial class tUser_ex
    {
        #region Property
    
        public virtual long UID
        {
            get;
            set;
        }
    
        public virtual string Accout
        {
            get;
            set;
        }
    
        public virtual string Email
        {
            get;
            set;
        }
    
        public virtual byte Switch
        {
            get;
            set;
        }
    
        public virtual string DefaultApp
        {
            get;
            set;
        }
    
        public virtual string DepID
        {
            get;
            set;
        }
    
        public virtual long UserType
        {
            get;
            set;
        }
    
        public virtual string UserID2
        {
            get;
            set;
        }
    
        public virtual string UserID3
        {
            get;
            set;
        }
    
        public virtual string Photo
        {
            get;
            set;
        }
    
        public virtual int UserSex
        {
            get;
            set;
        }
    
        public virtual string UserTel
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UserBirthday
        {
            get { return _userBirthday; }
            set { 
    			if (value != null){
    				if (value.Value.Kind == DateTimeKind.Unspecified) {
    					_userBirthday = DateTime.SpecifyKind(value.Value, DateTimeKind.Utc);
    				} else {
    					_userBirthday = value;
    				}
    			}
    			else 		_userBirthday = value; 
    	}
        }
        private Nullable<System.DateTime> _userBirthday;

        #endregion

        #region Navigation Properties
    
        public virtual Base_Admin Base_Admin
        {
            get { return _base_Admin; }
            set
            {
                if (!ReferenceEquals(_base_Admin, value))
                {
                    var previousValue = _base_Admin;
                    _base_Admin = value;
                    FixupBase_Admin(previousValue);
                }
            }
        }
        private Base_Admin _base_Admin;
    
        public virtual ICollection<Base_GroupUser> Base_GroupUser
        {
            get
            {
                if (_base_GroupUser == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<Base_GroupUser>();
                    newCollection.CollectionChanged += FixupBase_GroupUser;
                    _base_GroupUser = newCollection;
                }
                return _base_GroupUser;
            }
            set
            {
                if (!ReferenceEquals(_base_GroupUser, value))
                {
                    var previousValue = _base_GroupUser as MyLib.DAO.FixupCollection<Base_GroupUser>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBase_GroupUser;
                    }
                    _base_GroupUser = value;
                    var newValue = value as MyLib.DAO.FixupCollection<Base_GroupUser>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBase_GroupUser;
                    }
                }
            }
        }
        private ICollection<Base_GroupUser> _base_GroupUser;
    
        public virtual ICollection<Base_MyPlug> Base_MyPlug
        {
            get
            {
                if (_base_MyPlug == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<Base_MyPlug>();
                    newCollection.CollectionChanged += FixupBase_MyPlug;
                    _base_MyPlug = newCollection;
                }
                return _base_MyPlug;
            }
            set
            {
                if (!ReferenceEquals(_base_MyPlug, value))
                {
                    var previousValue = _base_MyPlug as MyLib.DAO.FixupCollection<Base_MyPlug>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBase_MyPlug;
                    }
                    _base_MyPlug = value;
                    var newValue = value as MyLib.DAO.FixupCollection<Base_MyPlug>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBase_MyPlug;
                    }
                }
            }
        }
        private ICollection<Base_MyPlug> _base_MyPlug;
    
        public virtual ICollection<Base_PlugSet> Base_PlugSet
        {
            get
            {
                if (_base_PlugSet == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<Base_PlugSet>();
                    newCollection.CollectionChanged += FixupBase_PlugSet;
                    _base_PlugSet = newCollection;
                }
                return _base_PlugSet;
            }
            set
            {
                if (!ReferenceEquals(_base_PlugSet, value))
                {
                    var previousValue = _base_PlugSet as MyLib.DAO.FixupCollection<Base_PlugSet>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBase_PlugSet;
                    }
                    _base_PlugSet = value;
                    var newValue = value as MyLib.DAO.FixupCollection<Base_PlugSet>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBase_PlugSet;
                    }
                }
            }
        }
        private ICollection<Base_PlugSet> _base_PlugSet;

        #endregion

        #region Association Fixup
    
        private void FixupBase_Admin(Base_Admin previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.tUser_ex, this))
            {
                previousValue.tUser_ex = null;
            }
    
            if (Base_Admin != null)
            {
                Base_Admin.tUser_ex = this;
            }
        }
    
        private void FixupBase_GroupUser(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Base_GroupUser item in e.NewItems)
                {
                    item.tUser_ex = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Base_GroupUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.tUser_ex, this))
                    {
                        item.tUser_ex = null;
                    }
                }
            }
        }
    
        private void FixupBase_MyPlug(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Base_MyPlug item in e.NewItems)
                {
                    item.tUser_ex = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Base_MyPlug item in e.OldItems)
                {
                    if (ReferenceEquals(item.tUser_ex, this))
                    {
                        item.tUser_ex = null;
                    }
                }
            }
        }
    
        private void FixupBase_PlugSet(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Base_PlugSet item in e.NewItems)
                {
                    item.tUser_ex = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Base_PlugSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.tUser_ex, this))
                    {
                        item.tUser_ex = null;
                    }
                }
            }
        }

        #endregion

    }
}
