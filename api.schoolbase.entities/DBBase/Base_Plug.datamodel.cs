//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace api.schoolbase.entities.DBBase
{
    
    public partial class _DBBase
    {
        public static @__api.schoolbase.entities.DBBase.Entity.Base_Plug_Columns Base_Plug = new @__api.schoolbase.entities.DBBase.Entity.Base_Plug_Columns();
    }
    namespace @__api.schoolbase.entities.DBBase.Entity
    {
        public class Base_Plug_Columns : MyLib.DbAccess.SQL.IQueryTable
        {
            private const string ___TABLE_NAME = "Base_Plug";
            private string ___aliasName;
            public Base_Plug_Columns(string aliasName) : base("DBBase") { this.___aliasName = aliasName; }
            public Base_Plug_Columns() : base("DBBase") { this.___aliasName = ___TABLE_NAME; }
    
        #region Table Columns
    
    		private static MyLib.DbAccess.SQL.QueryColumn _PlugID = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".PlugID"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn PlugID
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _PlugID;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".PlugID"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _ParentID = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".ParentID"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn ParentID
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _ParentID;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".ParentID"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _Permission = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".Permission"), DbType.Int64);
            public MyLib.DbAccess.SQL.QueryColumn Permission
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _Permission;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".Permission"), DbType.Int64);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _DskType = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".DskType"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn DskType
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _DskType;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".DskType"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _PSort = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".PSort"), DbType.Int32);
            public MyLib.DbAccess.SQL.QueryColumn PSort
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _PSort;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".PSort"), DbType.Int32);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _PName = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".PName"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn PName
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _PName;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".PName"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _PUrl = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".PUrl"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn PUrl
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _PUrl;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".PUrl"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _PCode = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".PCode"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn PCode
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _PCode;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".PCode"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _OpenType = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".OpenType"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn OpenType
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _OpenType;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".OpenType"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _PIcon = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".PIcon"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn PIcon
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _PIcon;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".PIcon"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _PDes = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".PDes"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn PDes
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _PDes;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".PDes"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _UserType = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".UserType"), DbType.Int64);
            public MyLib.DbAccess.SQL.QueryColumn UserType
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _UserType;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".UserType"), DbType.Int64);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _ChildrenNum = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".ChildrenNum"), DbType.Byte);
            public MyLib.DbAccess.SQL.QueryColumn ChildrenNum
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _ChildrenNum;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".ChildrenNum"), DbType.Byte);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _Depth = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".Depth"), DbType.Byte);
            public MyLib.DbAccess.SQL.QueryColumn Depth
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _Depth;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".Depth"), DbType.Byte);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _IsStop = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".IsStop"), DbType.Byte);
            public MyLib.DbAccess.SQL.QueryColumn IsStop
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _IsStop;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".IsStop"), DbType.Byte);
                }
            }

        #endregion

                
            public override string ___GetTableName() { return ___TABLE_NAME; }
    		public override string ___GetAliasName() { return ___aliasName ?? ___TABLE_NAME; }
    				        public override MyLib.DbAccess.SQL.QueryColumn ___GetIdentityColumn() { return _PlugID; }
            		public @__api.schoolbase.entities.DBBase.Entity.Base_Plug_Columns @__Alias(string aliasName) { return new @__api.schoolbase.entities.DBBase.Entity.Base_Plug_Columns(aliasName); }
        }
    }
    [System.Serializable]
    public partial class Base_Plug
    {
        #region Property
    
        public virtual string PlugID
        {
            get;
            set;
        }
    
        public virtual string ParentID
        {
            get;
            set;
        }
    
        public virtual long Permission
        {
            get;
            set;
        }
    
        public virtual string DskType
        {
            get;
            set;
        }
    
        public virtual int PSort
        {
            get;
            set;
        }
    
        public virtual string PName
        {
            get;
            set;
        }
    
        public virtual string PUrl
        {
            get;
            set;
        }
    
        public virtual string PCode
        {
            get;
            set;
        }
    
        public virtual string OpenType
        {
            get;
            set;
        }
    
        public virtual string PIcon
        {
            get;
            set;
        }
    
        public virtual string PDes
        {
            get;
            set;
        }
    
        public virtual long UserType
        {
            get;
            set;
        }
    
        public virtual byte ChildrenNum
        {
            get;
            set;
        }
    
        public virtual byte Depth
        {
            get;
            set;
        }
    
        public virtual byte IsStop
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Base_DepPlug> Base_DepPlug
        {
            get
            {
                if (_base_DepPlug == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<Base_DepPlug>();
                    newCollection.CollectionChanged += FixupBase_DepPlug;
                    _base_DepPlug = newCollection;
                }
                return _base_DepPlug;
            }
            set
            {
                if (!ReferenceEquals(_base_DepPlug, value))
                {
                    var previousValue = _base_DepPlug as MyLib.DAO.FixupCollection<Base_DepPlug>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBase_DepPlug;
                    }
                    _base_DepPlug = value;
                    var newValue = value as MyLib.DAO.FixupCollection<Base_DepPlug>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBase_DepPlug;
                    }
                }
            }
        }
        private ICollection<Base_DepPlug> _base_DepPlug;
    
        public virtual ICollection<Base_GroupPlug> Base_GroupPlug
        {
            get
            {
                if (_base_GroupPlug == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<Base_GroupPlug>();
                    newCollection.CollectionChanged += FixupBase_GroupPlug;
                    _base_GroupPlug = newCollection;
                }
                return _base_GroupPlug;
            }
            set
            {
                if (!ReferenceEquals(_base_GroupPlug, value))
                {
                    var previousValue = _base_GroupPlug as MyLib.DAO.FixupCollection<Base_GroupPlug>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBase_GroupPlug;
                    }
                    _base_GroupPlug = value;
                    var newValue = value as MyLib.DAO.FixupCollection<Base_GroupPlug>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBase_GroupPlug;
                    }
                }
            }
        }
        private ICollection<Base_GroupPlug> _base_GroupPlug;
    
        public virtual ICollection<Base_MyPlug> Base_MyPlug
        {
            get
            {
                if (_base_MyPlug == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<Base_MyPlug>();
                    newCollection.CollectionChanged += FixupBase_MyPlug;
                    _base_MyPlug = newCollection;
                }
                return _base_MyPlug;
            }
            set
            {
                if (!ReferenceEquals(_base_MyPlug, value))
                {
                    var previousValue = _base_MyPlug as MyLib.DAO.FixupCollection<Base_MyPlug>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBase_MyPlug;
                    }
                    _base_MyPlug = value;
                    var newValue = value as MyLib.DAO.FixupCollection<Base_MyPlug>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBase_MyPlug;
                    }
                }
            }
        }
        private ICollection<Base_MyPlug> _base_MyPlug;
    
        public virtual ICollection<Base_PlugSet> Base_PlugSet
        {
            get
            {
                if (_base_PlugSet == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<Base_PlugSet>();
                    newCollection.CollectionChanged += FixupBase_PlugSet;
                    _base_PlugSet = newCollection;
                }
                return _base_PlugSet;
            }
            set
            {
                if (!ReferenceEquals(_base_PlugSet, value))
                {
                    var previousValue = _base_PlugSet as MyLib.DAO.FixupCollection<Base_PlugSet>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBase_PlugSet;
                    }
                    _base_PlugSet = value;
                    var newValue = value as MyLib.DAO.FixupCollection<Base_PlugSet>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBase_PlugSet;
                    }
                }
            }
        }
        private ICollection<Base_PlugSet> _base_PlugSet;

        #endregion

        #region Association Fixup
    
        private void FixupBase_DepPlug(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Base_DepPlug item in e.NewItems)
                {
                    item.Base_Plug = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Base_DepPlug item in e.OldItems)
                {
                    if (ReferenceEquals(item.Base_Plug, this))
                    {
                        item.Base_Plug = null;
                    }
                }
            }
        }
    
        private void FixupBase_GroupPlug(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Base_GroupPlug item in e.NewItems)
                {
                    item.Base_Plug = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Base_GroupPlug item in e.OldItems)
                {
                    if (ReferenceEquals(item.Base_Plug, this))
                    {
                        item.Base_Plug = null;
                    }
                }
            }
        }
    
        private void FixupBase_MyPlug(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Base_MyPlug item in e.NewItems)
                {
                    item.Base_Plug = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Base_MyPlug item in e.OldItems)
                {
                    if (ReferenceEquals(item.Base_Plug, this))
                    {
                        item.Base_Plug = null;
                    }
                }
            }
        }
    
        private void FixupBase_PlugSet(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Base_PlugSet item in e.NewItems)
                {
                    item.Base_Plug = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Base_PlugSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.Base_Plug, this))
                    {
                        item.Base_Plug = null;
                    }
                }
            }
        }

        #endregion

    }
}
