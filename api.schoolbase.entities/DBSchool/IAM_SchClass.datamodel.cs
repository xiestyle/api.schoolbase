//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace api.schoolbase.entities.DBSchool
{
    
    public partial class _DBSchool
    {
        public static @__api.schoolbase.entities.DBSchool.Entity.IAM_SchClass_Columns IAM_SchClass = new @__api.schoolbase.entities.DBSchool.Entity.IAM_SchClass_Columns();
    }
    namespace @__api.schoolbase.entities.DBSchool.Entity
    {
        public class IAM_SchClass_Columns : MyLib.DbAccess.SQL.IQueryTable
        {
            private const string ___TABLE_NAME = "IAM_SchClass";
            private string ___aliasName;
            public IAM_SchClass_Columns(string aliasName) : base("DBSchool") { this.___aliasName = aliasName; }
            public IAM_SchClass_Columns() : base("DBSchool") { this.___aliasName = ___TABLE_NAME; }
    
        #region Table Columns
    
    		private static MyLib.DbAccess.SQL.QueryColumn _SerID = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".SerID"), DbType.Int64);
            public MyLib.DbAccess.SQL.QueryColumn SerID
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _SerID;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".SerID"), DbType.Int64);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _SpecialtyID = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".SpecialtyID"), DbType.Int64);
            public MyLib.DbAccess.SQL.QueryColumn SpecialtyID
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _SpecialtyID;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".SpecialtyID"), DbType.Int64);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _ClassNumber = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".ClassNumber"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn ClassNumber
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _ClassNumber;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".ClassNumber"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _ClassName = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".ClassName"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn ClassName
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _ClassName;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".ClassName"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _DTime = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".DTime"), DbType.DateTime);
            public MyLib.DbAccess.SQL.QueryColumn DTime
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _DTime;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".DTime"), DbType.DateTime);
                }
            }

        #endregion

                
            public override string ___GetTableName() { return ___TABLE_NAME; }
    		public override string ___GetAliasName() { return ___aliasName ?? ___TABLE_NAME; }
    		        public override IEnumerable<MyLib.DbAccess.SQL.QueryColumn> ___GetAutoIncrementColumn() { return new MyLib.DbAccess.SQL.QueryColumn[]{_SerID}; }
    				        public override MyLib.DbAccess.SQL.QueryColumn ___GetIdentityColumn() { return _SerID; }
            		public @__api.schoolbase.entities.DBSchool.Entity.IAM_SchClass_Columns @__Alias(string aliasName) { return new @__api.schoolbase.entities.DBSchool.Entity.IAM_SchClass_Columns(aliasName); }
        }
    }
    [System.Serializable]
    public partial class IAM_SchClass
    {
        #region Property
    
        public virtual long SerID
        {
            get { return _serID; }
            set
            {
                if (_serID != value)
                {
                    if (IAM_SchClass2 != null && IAM_SchClass2.SerID != value)
                    {
                        IAM_SchClass2 = null;
                    }
                    _serID = value;
                }
            }
        }
        private long _serID;
    
        public virtual long SpecialtyID
        {
            get { return _specialtyID; }
            set
            {
                if (_specialtyID != value)
                {
                    if (IAM_SchSpecialty != null && IAM_SchSpecialty.SERID != value)
                    {
                        IAM_SchSpecialty = null;
                    }
                    _specialtyID = value;
                }
            }
        }
        private long _specialtyID;
    
        public virtual string ClassNumber
        {
            get;
            set;
        }
    
        public virtual string ClassName
        {
            get;
            set;
        }
    
        public virtual System.DateTime DTime
        {
            get { return _dTime; }
            set { 
    			if (value.Kind == DateTimeKind.Unspecified) {
    			_dTime = DateTime.SpecifyKind(value, DateTimeKind.Utc);
    			} else {
    				_dTime = value;
    			}
    			}
        }
        private System.DateTime _dTime;

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<IAM_ClassHistory> IAM_ClassHistory
        {
            get
            {
                if (_iAM_ClassHistory == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<IAM_ClassHistory>();
                    newCollection.CollectionChanged += FixupIAM_ClassHistory;
                    _iAM_ClassHistory = newCollection;
                }
                return _iAM_ClassHistory;
            }
            set
            {
                if (!ReferenceEquals(_iAM_ClassHistory, value))
                {
                    var previousValue = _iAM_ClassHistory as MyLib.DAO.FixupCollection<IAM_ClassHistory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIAM_ClassHistory;
                    }
                    _iAM_ClassHistory = value;
                    var newValue = value as MyLib.DAO.FixupCollection<IAM_ClassHistory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIAM_ClassHistory;
                    }
                }
            }
        }
        private ICollection<IAM_ClassHistory> _iAM_ClassHistory;
    
        public virtual IAM_SchClass IAM_SchClass1
        {
            get { return _iAM_SchClass1; }
            set
            {
                if (!ReferenceEquals(_iAM_SchClass1, value))
                {
                    var previousValue = _iAM_SchClass1;
                    _iAM_SchClass1 = value;
                    FixupIAM_SchClass1(previousValue);
                }
            }
        }
        private IAM_SchClass _iAM_SchClass1;
    
        public virtual IAM_SchClass IAM_SchClass2
        {
            get { return _iAM_SchClass2; }
            set
            {
                if (!ReferenceEquals(_iAM_SchClass2, value))
                {
                    var previousValue = _iAM_SchClass2;
                    _iAM_SchClass2 = value;
                    FixupIAM_SchClass2(previousValue);
                }
            }
        }
        private IAM_SchClass _iAM_SchClass2;
    
        public virtual IAM_SchSpecialty IAM_SchSpecialty
        {
            get { return _iAM_SchSpecialty; }
            set
            {
                if (!ReferenceEquals(_iAM_SchSpecialty, value))
                {
                    var previousValue = _iAM_SchSpecialty;
                    _iAM_SchSpecialty = value;
                    FixupIAM_SchSpecialty(previousValue);
                }
            }
        }
        private IAM_SchSpecialty _iAM_SchSpecialty;
    
        public virtual ICollection<IAM_StuClass> IAM_StuClass
        {
            get
            {
                if (_iAM_StuClass == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<IAM_StuClass>();
                    newCollection.CollectionChanged += FixupIAM_StuClass;
                    _iAM_StuClass = newCollection;
                }
                return _iAM_StuClass;
            }
            set
            {
                if (!ReferenceEquals(_iAM_StuClass, value))
                {
                    var previousValue = _iAM_StuClass as MyLib.DAO.FixupCollection<IAM_StuClass>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIAM_StuClass;
                    }
                    _iAM_StuClass = value;
                    var newValue = value as MyLib.DAO.FixupCollection<IAM_StuClass>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIAM_StuClass;
                    }
                }
            }
        }
        private ICollection<IAM_StuClass> _iAM_StuClass;

        #endregion

        #region Association Fixup
    
        private void FixupIAM_SchClass1(IAM_SchClass previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.IAM_SchClass2, this))
            {
                previousValue.IAM_SchClass2 = null;
            }
    
            if (IAM_SchClass1 != null)
            {
                IAM_SchClass1.IAM_SchClass2 = this;
            }
        }
    
        private void FixupIAM_SchClass2(IAM_SchClass previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.IAM_SchClass1, this))
            {
                previousValue.IAM_SchClass1 = null;
            }
    
            if (IAM_SchClass2 != null)
            {
                IAM_SchClass2.IAM_SchClass1 = this;
                if (SerID != IAM_SchClass2.SerID)
                {
                    SerID = IAM_SchClass2.SerID;
                }
            }
        }
    
        private void FixupIAM_SchSpecialty(IAM_SchSpecialty previousValue)
        {
            if (previousValue != null && previousValue.IAM_SchClass.Contains(this))
            {
                previousValue.IAM_SchClass.Remove(this);
            }
    
            if (IAM_SchSpecialty != null)
            {
                if (!IAM_SchSpecialty.IAM_SchClass.Contains(this))
                {
                    IAM_SchSpecialty.IAM_SchClass.Add(this);
                }
                if (SpecialtyID != IAM_SchSpecialty.SERID)
                {
                    SpecialtyID = IAM_SchSpecialty.SERID;
                }
            }
        }
    
        private void FixupIAM_ClassHistory(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (IAM_ClassHistory item in e.NewItems)
                {
                    item.IAM_SchClass = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IAM_ClassHistory item in e.OldItems)
                {
                    if (ReferenceEquals(item.IAM_SchClass, this))
                    {
                        item.IAM_SchClass = null;
                    }
                }
            }
        }
    
        private void FixupIAM_StuClass(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (IAM_StuClass item in e.NewItems)
                {
                    item.IAM_SchClass = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IAM_StuClass item in e.OldItems)
                {
                    if (ReferenceEquals(item.IAM_SchClass, this))
                    {
                        item.IAM_SchClass = null;
                    }
                }
            }
        }

        #endregion

    }
}
