//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace api.schoolbase.entities.DBSchool
{
    
    public partial class _DBSchool
    {
        public static @__api.schoolbase.entities.DBSchool.Entity.IAM_SchSpecialty_Columns IAM_SchSpecialty = new @__api.schoolbase.entities.DBSchool.Entity.IAM_SchSpecialty_Columns();
    }
    namespace @__api.schoolbase.entities.DBSchool.Entity
    {
        public class IAM_SchSpecialty_Columns : MyLib.DbAccess.SQL.IQueryTable
        {
            private const string ___TABLE_NAME = "IAM_SchSpecialty";
            private string ___aliasName;
            public IAM_SchSpecialty_Columns(string aliasName) : base("DBSchool") { this.___aliasName = aliasName; }
            public IAM_SchSpecialty_Columns() : base("DBSchool") { this.___aliasName = ___TABLE_NAME; }
    
        #region Table Columns
    
    		private static MyLib.DbAccess.SQL.QueryColumn _SERID = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".SERID"), DbType.Int64);
            public MyLib.DbAccess.SQL.QueryColumn SERID
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _SERID;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".SERID"), DbType.Int64);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _SchSerID = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".SchSerID"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn SchSerID
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _SchSerID;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".SchSerID"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _SPEID = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".SPEID"), DbType.Int64);
            public MyLib.DbAccess.SQL.QueryColumn SPEID
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _SPEID;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".SPEID"), DbType.Int64);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _SpecName = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".SpecName"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn SpecName
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _SpecName;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".SpecName"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _Dtime = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".Dtime"), DbType.DateTime);
            public MyLib.DbAccess.SQL.QueryColumn Dtime
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _Dtime;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".Dtime"), DbType.DateTime);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _isAvailable = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".isAvailable"), DbType.Boolean);
            public MyLib.DbAccess.SQL.QueryColumn isAvailable
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _isAvailable;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".isAvailable"), DbType.Boolean);
                }
            }

        #endregion

                
            public override string ___GetTableName() { return ___TABLE_NAME; }
    		public override string ___GetAliasName() { return ___aliasName ?? ___TABLE_NAME; }
    		        public override IEnumerable<MyLib.DbAccess.SQL.QueryColumn> ___GetAutoIncrementColumn() { return new MyLib.DbAccess.SQL.QueryColumn[]{_SERID}; }
    				        public override MyLib.DbAccess.SQL.QueryColumn ___GetIdentityColumn() { return _SERID; }
            		public @__api.schoolbase.entities.DBSchool.Entity.IAM_SchSpecialty_Columns @__Alias(string aliasName) { return new @__api.schoolbase.entities.DBSchool.Entity.IAM_SchSpecialty_Columns(aliasName); }
        }
    }
    [System.Serializable]
    public partial class IAM_SchSpecialty
    {
        #region Property
    
        public virtual long SERID
        {
            get;
            set;
        }
    
        public virtual string SchSerID
        {
            get { return _schSerID; }
            set
            {
                if (_schSerID != value)
                {
                    if (IAM_SchInfo != null && IAM_SchInfo.SchSerID != value)
                    {
                        IAM_SchInfo = null;
                    }
                    _schSerID = value;
                }
            }
        }
        private string _schSerID;
    
        public virtual long SPEID
        {
            get;
            set;
        }
    
        public virtual string SpecName
        {
            get;
            set;
        }
    
        public virtual System.DateTime Dtime
        {
            get { return _dtime; }
            set { 
    			if (value.Kind == DateTimeKind.Unspecified) {
    			_dtime = DateTime.SpecifyKind(value, DateTimeKind.Utc);
    			} else {
    				_dtime = value;
    			}
    			}
        }
        private System.DateTime _dtime;
    
        public virtual bool isAvailable
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<IAM_SchClass> IAM_SchClass
        {
            get
            {
                if (_iAM_SchClass == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<IAM_SchClass>();
                    newCollection.CollectionChanged += FixupIAM_SchClass;
                    _iAM_SchClass = newCollection;
                }
                return _iAM_SchClass;
            }
            set
            {
                if (!ReferenceEquals(_iAM_SchClass, value))
                {
                    var previousValue = _iAM_SchClass as MyLib.DAO.FixupCollection<IAM_SchClass>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIAM_SchClass;
                    }
                    _iAM_SchClass = value;
                    var newValue = value as MyLib.DAO.FixupCollection<IAM_SchClass>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIAM_SchClass;
                    }
                }
            }
        }
        private ICollection<IAM_SchClass> _iAM_SchClass;
    
        public virtual ICollection<IAM_SchGrade> IAM_SchGrade
        {
            get
            {
                if (_iAM_SchGrade == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<IAM_SchGrade>();
                    newCollection.CollectionChanged += FixupIAM_SchGrade;
                    _iAM_SchGrade = newCollection;
                }
                return _iAM_SchGrade;
            }
            set
            {
                if (!ReferenceEquals(_iAM_SchGrade, value))
                {
                    var previousValue = _iAM_SchGrade as MyLib.DAO.FixupCollection<IAM_SchGrade>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIAM_SchGrade;
                    }
                    _iAM_SchGrade = value;
                    var newValue = value as MyLib.DAO.FixupCollection<IAM_SchGrade>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIAM_SchGrade;
                    }
                }
            }
        }
        private ICollection<IAM_SchGrade> _iAM_SchGrade;
    
        public virtual IAM_SchInfo IAM_SchInfo
        {
            get { return _iAM_SchInfo; }
            set
            {
                if (!ReferenceEquals(_iAM_SchInfo, value))
                {
                    var previousValue = _iAM_SchInfo;
                    _iAM_SchInfo = value;
                    FixupIAM_SchInfo(previousValue);
                }
            }
        }
        private IAM_SchInfo _iAM_SchInfo;
    
        public virtual ICollection<IAM_SchSubject> IAM_SchSubject
        {
            get
            {
                if (_iAM_SchSubject == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<IAM_SchSubject>();
                    newCollection.CollectionChanged += FixupIAM_SchSubject;
                    _iAM_SchSubject = newCollection;
                }
                return _iAM_SchSubject;
            }
            set
            {
                if (!ReferenceEquals(_iAM_SchSubject, value))
                {
                    var previousValue = _iAM_SchSubject as MyLib.DAO.FixupCollection<IAM_SchSubject>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupIAM_SchSubject;
                    }
                    _iAM_SchSubject = value;
                    var newValue = value as MyLib.DAO.FixupCollection<IAM_SchSubject>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupIAM_SchSubject;
                    }
                }
            }
        }
        private ICollection<IAM_SchSubject> _iAM_SchSubject;

        #endregion

        #region Association Fixup
    
        private void FixupIAM_SchInfo(IAM_SchInfo previousValue)
        {
            if (previousValue != null && previousValue.IAM_SchSpecialty.Contains(this))
            {
                previousValue.IAM_SchSpecialty.Remove(this);
            }
    
            if (IAM_SchInfo != null)
            {
                if (!IAM_SchInfo.IAM_SchSpecialty.Contains(this))
                {
                    IAM_SchInfo.IAM_SchSpecialty.Add(this);
                }
                if (SchSerID != IAM_SchInfo.SchSerID)
                {
                    SchSerID = IAM_SchInfo.SchSerID;
                }
            }
        }
    
        private void FixupIAM_SchClass(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (IAM_SchClass item in e.NewItems)
                {
                    item.IAM_SchSpecialty = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IAM_SchClass item in e.OldItems)
                {
                    if (ReferenceEquals(item.IAM_SchSpecialty, this))
                    {
                        item.IAM_SchSpecialty = null;
                    }
                }
            }
        }
    
        private void FixupIAM_SchGrade(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (IAM_SchGrade item in e.NewItems)
                {
                    item.IAM_SchSpecialty = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IAM_SchGrade item in e.OldItems)
                {
                    if (ReferenceEquals(item.IAM_SchSpecialty, this))
                    {
                        item.IAM_SchSpecialty = null;
                    }
                }
            }
        }
    
        private void FixupIAM_SchSubject(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (IAM_SchSubject item in e.NewItems)
                {
                    item.IAM_SchSpecialty = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IAM_SchSubject item in e.OldItems)
                {
                    if (ReferenceEquals(item.IAM_SchSpecialty, this))
                    {
                        item.IAM_SchSpecialty = null;
                    }
                }
            }
        }

        #endregion

    }
}
