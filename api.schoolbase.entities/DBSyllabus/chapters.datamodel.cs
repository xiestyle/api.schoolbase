//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace api.schoolbase.entities.DBSyllabus
{
    
    public partial class _DBSyllabus
    {
        public static @__api.schoolbase.entities.DBSyllabus.Entity.chapters_Columns chapters = new @__api.schoolbase.entities.DBSyllabus.Entity.chapters_Columns();
    }
    namespace @__api.schoolbase.entities.DBSyllabus.Entity
    {
        public class chapters_Columns : MyLib.DbAccess.SQL.IQueryTable
        {
            private const string ___TABLE_NAME = "chapters";
            private string ___aliasName;
            public chapters_Columns(string aliasName) : base("DBSyllabus") { this.___aliasName = aliasName; }
            public chapters_Columns() : base("DBSyllabus") { this.___aliasName = ___TABLE_NAME; }
    
        #region Table Columns
    
    		private static MyLib.DbAccess.SQL.QueryColumn _chapterid = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".chapterid"), DbType.Int32);
            public MyLib.DbAccess.SQL.QueryColumn chapterid
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _chapterid;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".chapterid"), DbType.Int32);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _chapter = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".chapter"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn chapter
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _chapter;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".chapter"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _subjectid = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".subjectid"), DbType.Int64);
            public MyLib.DbAccess.SQL.QueryColumn subjectid
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _subjectid;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".subjectid"), DbType.Int64);
                }
            }

        #endregion

                
            public override string ___GetTableName() { return ___TABLE_NAME; }
    		public override string ___GetAliasName() { return ___aliasName ?? ___TABLE_NAME; }
    				        public override MyLib.DbAccess.SQL.QueryColumn ___GetIdentityColumn() { return _chapterid; }
            		public @__api.schoolbase.entities.DBSyllabus.Entity.chapters_Columns @__Alias(string aliasName) { return new @__api.schoolbase.entities.DBSyllabus.Entity.chapters_Columns(aliasName); }
        }
    }
    [System.Serializable]
    public partial class chapters
    {
        #region Property
    
        public virtual int chapterid
        {
            get;
            set;
        }
    
        public virtual string chapter
        {
            get;
            set;
        }
    
        public virtual long subjectid
        {
            get { return _subjectid; }
            set
            {
                if (_subjectid != value)
                {
                    if (subjects != null && subjects.subjectid != value)
                    {
                        subjects = null;
                    }
                    _subjectid = value;
                }
            }
        }
        private long _subjectid;

        #endregion

        #region Navigation Properties
    
        public virtual subjects subjects
        {
            get { return _subjects; }
            set
            {
                if (!ReferenceEquals(_subjects, value))
                {
                    var previousValue = _subjects;
                    _subjects = value;
                    Fixupsubjects(previousValue);
                }
            }
        }
        private subjects _subjects;
    
        public virtual ICollection<sections> sections
        {
            get
            {
                if (_sections == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<sections>();
                    newCollection.CollectionChanged += Fixupsections;
                    _sections = newCollection;
                }
                return _sections;
            }
            set
            {
                if (!ReferenceEquals(_sections, value))
                {
                    var previousValue = _sections as MyLib.DAO.FixupCollection<sections>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupsections;
                    }
                    _sections = value;
                    var newValue = value as MyLib.DAO.FixupCollection<sections>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupsections;
                    }
                }
            }
        }
        private ICollection<sections> _sections;

        #endregion

        #region Association Fixup
    
        private void Fixupsubjects(subjects previousValue)
        {
            if (previousValue != null && previousValue.chapters.Contains(this))
            {
                previousValue.chapters.Remove(this);
            }
    
            if (subjects != null)
            {
                if (!subjects.chapters.Contains(this))
                {
                    subjects.chapters.Add(this);
                }
                if (subjectid != subjects.subjectid)
                {
                    subjectid = subjects.subjectid;
                }
            }
        }
    
        private void Fixupsections(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (sections item in e.NewItems)
                {
                    item.chapters = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (sections item in e.OldItems)
                {
                    if (ReferenceEquals(item.chapters, this))
                    {
                        item.chapters = null;
                    }
                }
            }
        }

        #endregion

    }
}
