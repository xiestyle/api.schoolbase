//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace api.schoolbase.entities.DBSyllabus
{
    
    public partial class _DBSyllabus
    {
        public static @__api.schoolbase.entities.DBSyllabus.Entity.sections_Columns sections = new @__api.schoolbase.entities.DBSyllabus.Entity.sections_Columns();
    }
    namespace @__api.schoolbase.entities.DBSyllabus.Entity
    {
        public class sections_Columns : MyLib.DbAccess.SQL.IQueryTable
        {
            private const string ___TABLE_NAME = "sections";
            private string ___aliasName;
            public sections_Columns(string aliasName) : base("DBSyllabus") { this.___aliasName = aliasName; }
            public sections_Columns() : base("DBSyllabus") { this.___aliasName = ___TABLE_NAME; }
    
        #region Table Columns
    
    		private static MyLib.DbAccess.SQL.QueryColumn _sectionid = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".sectionid"), DbType.Int32);
            public MyLib.DbAccess.SQL.QueryColumn sectionid
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _sectionid;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".sectionid"), DbType.Int32);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _section = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".section"), DbType.String);
            public MyLib.DbAccess.SQL.QueryColumn section
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _section;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".section"), DbType.String);
                }
            }
    
    		private static MyLib.DbAccess.SQL.QueryColumn _chapterid = new MyLib.DbAccess.SQL.QueryColumn((___TABLE_NAME + ".chapterid"), DbType.Int32);
            public MyLib.DbAccess.SQL.QueryColumn chapterid
            {
                get
                {
                    if ((this.___aliasName == ___TABLE_NAME)) return _chapterid;
                    else return new MyLib.DbAccess.SQL.QueryColumn((this.___aliasName + ".chapterid"), DbType.Int32);
                }
            }

        #endregion

                
            public override string ___GetTableName() { return ___TABLE_NAME; }
    		public override string ___GetAliasName() { return ___aliasName ?? ___TABLE_NAME; }
    				        public override MyLib.DbAccess.SQL.QueryColumn ___GetIdentityColumn() { return _sectionid; }
            		public @__api.schoolbase.entities.DBSyllabus.Entity.sections_Columns @__Alias(string aliasName) { return new @__api.schoolbase.entities.DBSyllabus.Entity.sections_Columns(aliasName); }
        }
    }
    [System.Serializable]
    public partial class sections
    {
        #region Property
    
        public virtual int sectionid
        {
            get;
            set;
        }
    
        public virtual string section
        {
            get;
            set;
        }
    
        public virtual int chapterid
        {
            get { return _chapterid; }
            set
            {
                if (_chapterid != value)
                {
                    if (chapters != null && chapters.chapterid != value)
                    {
                        chapters = null;
                    }
                    _chapterid = value;
                }
            }
        }
        private int _chapterid;

        #endregion

        #region Navigation Properties
    
        public virtual chapters chapters
        {
            get { return _chapters; }
            set
            {
                if (!ReferenceEquals(_chapters, value))
                {
                    var previousValue = _chapters;
                    _chapters = value;
                    Fixupchapters(previousValue);
                }
            }
        }
        private chapters _chapters;
    
        public virtual ICollection<sclasstosection> sclasstosection
        {
            get
            {
                if (_sclasstosection == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<sclasstosection>();
                    newCollection.CollectionChanged += Fixupsclasstosection;
                    _sclasstosection = newCollection;
                }
                return _sclasstosection;
            }
            set
            {
                if (!ReferenceEquals(_sclasstosection, value))
                {
                    var previousValue = _sclasstosection as MyLib.DAO.FixupCollection<sclasstosection>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupsclasstosection;
                    }
                    _sclasstosection = value;
                    var newValue = value as MyLib.DAO.FixupCollection<sclasstosection>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupsclasstosection;
                    }
                }
            }
        }
        private ICollection<sclasstosection> _sclasstosection;
    
        public virtual ICollection<syllabustosection> syllabustosection
        {
            get
            {
                if (_syllabustosection == null)
                {
                    var newCollection = new MyLib.DAO.FixupCollection<syllabustosection>();
                    newCollection.CollectionChanged += Fixupsyllabustosection;
                    _syllabustosection = newCollection;
                }
                return _syllabustosection;
            }
            set
            {
                if (!ReferenceEquals(_syllabustosection, value))
                {
                    var previousValue = _syllabustosection as MyLib.DAO.FixupCollection<syllabustosection>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupsyllabustosection;
                    }
                    _syllabustosection = value;
                    var newValue = value as MyLib.DAO.FixupCollection<syllabustosection>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupsyllabustosection;
                    }
                }
            }
        }
        private ICollection<syllabustosection> _syllabustosection;

        #endregion

        #region Association Fixup
    
        private void Fixupchapters(chapters previousValue)
        {
            if (previousValue != null && previousValue.sections.Contains(this))
            {
                previousValue.sections.Remove(this);
            }
    
            if (chapters != null)
            {
                if (!chapters.sections.Contains(this))
                {
                    chapters.sections.Add(this);
                }
                if (chapterid != chapters.chapterid)
                {
                    chapterid = chapters.chapterid;
                }
            }
        }
    
        private void Fixupsclasstosection(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (sclasstosection item in e.NewItems)
                {
                    item.sections = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (sclasstosection item in e.OldItems)
                {
                    if (ReferenceEquals(item.sections, this))
                    {
                        item.sections = null;
                    }
                }
            }
        }
    
        private void Fixupsyllabustosection(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (syllabustosection item in e.NewItems)
                {
                    item.sections = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (syllabustosection item in e.OldItems)
                {
                    if (ReferenceEquals(item.sections, this))
                    {
                        item.sections = null;
                    }
                }
            }
        }

        #endregion

    }
}
